// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package tgbothandler is a generated GoMock package.
package tgbotmessage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActionSetterGetter is a mock of ActionSetterGetter interface.
type MockActionSetterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockActionSetterGetterMockRecorder
}

// MockActionSetterGetterMockRecorder is the mock recorder for MockActionSetterGetter.
type MockActionSetterGetterMockRecorder struct {
	mock *MockActionSetterGetter
}

// NewMockActionSetterGetter creates a new mock instance.
func NewMockActionSetterGetter(ctrl *gomock.Controller) *MockActionSetterGetter {
	mock := &MockActionSetterGetter{ctrl: ctrl}
	mock.recorder = &MockActionSetterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionSetterGetter) EXPECT() *MockActionSetterGetterMockRecorder {
	return m.recorder
}

// GetAction mocks base method.
func (m *MockActionSetterGetter) GetAction(ctx context.Context, id int64) Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", ctx, id)
	ret0, _ := ret[0].(Action)
	return ret0
}

// GetAction indicates an expected call of GetAction.
func (mr *MockActionSetterGetterMockRecorder) GetAction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockActionSetterGetter)(nil).GetAction), ctx, id)
}

// SetAction mocks base method.
func (m *MockActionSetterGetter) SetAction(ctx context.Context, id int64, action Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAction", ctx, id, action)
}

// SetAction indicates an expected call of SetAction.
func (mr *MockActionSetterGetterMockRecorder) SetAction(ctx, id, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAction", reflect.TypeOf((*MockActionSetterGetter)(nil).SetAction), ctx, id, action)
}
